//
// Created by Streaming on 2017-12-13.
//

#ifndef SFML_GAME_ENTITY_H
#define SFML_GAME_ENTITY_H

#include "SFML/Graphics.hpp"
#include <memory>
#include <iostream>

/// Storage information about type of entity
enum TypeOfEntity {
    GROUND,
    CREATURE,
    PLAYER,
};

/// Stores information about the possibility to collision
enum CollisionEnum {
    CAN_BE_COLLIDET,
    CAN_NOT_BE_COLLIDET
};

/// Stores information about a collision has been detected
enum IsCollidet {
    IS_COLLIDET,
    NO_COLLISION
};


/// Stores information about sprite
/// @param timeToNextFrame - time need to change frame, default 300000
/// @param currentTime - current time to change  frame, default 0
/// @param numbersOfFrame - number of frame, default 2
/// @param currentFrame - current frame, default 0
/// @param spriteWidth - Width of single frame, default 32
/// @param spriteHeight - Height of single frame, default 32
/// @param spriteOffsetX - Offset from x, default 0
/// @param spriteOffsetY - Offset from y, default 0
struct SpriteData {
    int timeToNextFrame = 300000; //1000000 = 1s
    int currentTime = 0;
    int numbersOfFrame = 2;
    int currentFrame = 0;
    int spriteWidth = 32;
    int spriteHeight = 32;
    int spriteOffsetX = 0;
    int spriteOffsetY = 0;

    SpriteData &operator=(const SpriteData &right);
};

/// Stores information positions Positions(x, y) default constructor
/// @param x - Global x coordinate, default 0
/// @param y - Global y coordinate. default 0

struct Positions {
    Positions(float cX, float cY) : x(cX), y(cY) {};
    float x = 0;
    float y = 0;
    Positions &operator=(const Positions &right);
};

/// Stores information positions
/// @param width - Global x coordinate, default 32
/// @param height - Global y coordinate, default 32
struct Size {
    int width = 32;
    int height = 32;
};

/// Stores information about collision parameters
/// @param xCollision - x coordinate of collsion
/// @param yCollision - y coordinate of collsion
/// @param xCollisionWidth - Width of collsion
/// @param yCollisionHeight - Width of collsion
/// @param collisionStatus - enum stored collision information and have been detected
/// @param collisionAble - enum stored information about collisions there is allowed (idk how translate)
struct CollisonParameters {
    float xCollision;
    float yCollision;
    float xCollisionWidth;
    float yCollisionHeight;
    IsCollidet collisionStatus = NO_COLLISION;
    CollisionEnum collisionAble = CAN_NOT_BE_COLLIDET;
};

class Entity {
private:
    int id;
    TypeOfEntity typeOfEntity;
    Positions positions;
    Size size;
private:
    CollisonParameters collisonParameters;

public:
/// Return type of Entity
/// \return TypeOfEntity - return TypeOfEntity obiect
    TypeOfEntity getTypeOfEntity();

/// Allow to set new type of Entity
/// \param typeOfEntity - TypeOfEntity obiect
    void setTypeOfEntity(TypeOfEntity typeOfEntity);

    Entity() = delete;

/// Default Entity constructor
/// @param cX - float global position  x of Player
/// @param cY - float global position  y of Player
/// @param cWidth - float width player sprite(affect collision to)
/// @param cHeight - float height player sprite(affect collision to)
    Entity(float cX, float cY, int cWidth, int cHeight);

/// wirtual destructor, must be overwritten
    virtual ~Entity();

/// Target to draw this entity, must be override to create draw(...) method
/// @param window - std::shared_ptr<sf::RenderWindow> obiect
    virtual void draw(std::shared_ptr<sf::RenderWindow> window) =0;

/// /// update method, everything shuld be update by dt value must be over override
/// \param dt - float
    virtual void update(const float dt)=0;

/// Allow to set id of entity, generated by CreatureSpawner or can be manually setted
/// \param i - int value
    void setEntityID(int i);

/// Return ID of entity, used by CreatureSpawner...
/// \return - int value
    int getEntityID();

/// Return collsion status, used to allow/denied Entity movment
/// \return -  bool value
    bool getCollsionStatus();

/// Allow to set collsion status, used to allow/denied Entity movment, collisonChecker...
/// \param newCollisionStatus - IsCollidet Enum
    void setCollisionStatus(IsCollidet newCollisionStatus);

/// Return status of collison is available for this Entity
/// \return - bool value
    bool isCollisionAble();

/// Allow to set collsion available to other Entity
/// \param newCollisionAble - CollisionEnum Enum
    void setCollisionAble(CollisionEnum newCollisionAble);

/// Return current position of Entity
/// \return - Positions obiect≈Ç
    Positions getPositions();

/// Allow to set new position
/// \param positions -Positions obiect
    void setPositions(Positions positions);

/// Return size obiect
/// \return Size obiect
    Size getSize();

    /// Allow to set new Size
    /// \param size - Size Obiect
    void setSize(Size size);

};

#endif //SFML_GAME_ENTITY_H
